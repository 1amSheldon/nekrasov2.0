from aiogram import Router, F, Bot
from aiogram.enums import content_type
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.db_statistic import databaseStatistics
from database.db_users import databaseUsers
from handlers.start import cmd_start
from keyboards.kb_admin import *
from states.admin import Admin

router = Router()

@router.callback_query(F.data == "adminPanel")
async def adminPanel(callback: CallbackQuery):
    await callback.message.edit_text(
        f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\.\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: \@iamsheldon \(–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º\)\n\n"
        f"*–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:*", reply_markup=adminMenu)


@router.callback_query(F.data == "adminExit")
async def adminReturnToMenu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await cmd_start(callback)


@router.callback_query(F.data == "adminStat")
async def adminStatistics(callback: CallbackQuery):
    await callback.message.edit_text(
        "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*"
        f"\n*–ß–µ–ª–æ–≤–µ–∫ –≤ –±–∞–∑–µ:* {databaseStatistics.getUsers()}"
        f"\n*–í—Å–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤:* {databaseStatistics.getPosts()}"
        f"\n*–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¢–ü:* {databaseStatistics.getSupportQuestions()}",
        reply_markup=adminMenuExit)


@router.callback_query(F.data == "adminMenuExit")
async def adminMenuFromExitStat(callback: CallbackQuery):
    await callback.message.edit_text(
        f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\.\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: \@iamsheldon \(–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º\)\n\n"
        f"*–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:*", reply_markup=adminMenu)


@router.callback_query(F.data == "newPost")
async def adminPostMenu(callback: CallbackQuery):
    await callback.message.edit_text("*–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞?*", reply_markup=postMenu)


@router.callback_query(F.data == "adminPostMenu")
async def adminPostTEXT(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "*–ü—Ä–∏–≤–µ—Ç\!*\n\n–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\(—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–≥—à–Ω—ã–º–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –µ—Å–ª–∏ –Ω–∞–¥–æ\)",
        reply_markup=adminMenuExit)
    await state.set_state(Admin.IN_POST_TEXT)


@router.message(Admin.IN_POST_TEXT)
async def adminPostNextTEXT(message: Message, state: FSMContext):
    try:
        await message.answer(
            f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n\n\n\n{message.html_text}\n\n\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∂–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º",
            reply_markup=postYesOrNo, parse_mode="HTML", disable_web_page_preview=True)
        await state.update_data(text=message.html_text)
    except Exception as ex:
        await message.answer(f"–û—à–∏–±–∫–∞! \n\nStack-Trace:\n{ex.args[0]}", parse_mode=None)


@router.callback_query(F.data == "postYes")
async def adminPostNextKBTEXT(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏ –ß–ï–†–ï–ó –¢–û–ß–ö–£ –° –ó–ê–ü–Ø–¢–û–ô –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫(—Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –∏ –ø—Ä–æ—á–∏–º)\n\n–ü—Ä–∏–º–µ—Ä: \n\n‚Üê–ü–µ—Ä–µ–π—Ç–∏;üî¥–°–®–ê;üîä–†–û–°–°–ò–Ø"
        "\n\n–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤—å —Å–∏–º–≤–æ–ª Z(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∞—è)",
        reply_markup=adminMenuExit, parse_mode=None)
    await callback.answer()
    await state.set_state(Admin.IN_POST_KB)


@router.message(Admin.IN_POST_KB)
async def adminPostNextKBLINKS(message: Message, state: FSMContext):
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ß–ï–†–ï–ó –¢–û–ß–ö–£ –° –ó–ê–ü–Ø–¢–û–ô —Å—Å—ã–ª–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∏(—Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–∏–º–µ—Ä—É)\n\n–ü—Ä–∏–º–µ—Ä: \n\nt.me/iamsheldon;t.me;telegram.org"
        "\n\n–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤—å —Å–∏–º–≤–æ–ª Z(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥–ª–∞–≤–Ω–∞—è)",
        reply_markup=adminMenuExit, parse_mode=None)
    await state.update_data(text_kb=message.text)
    await state.set_state(Admin.IN_POST_PHOTOS)


@router.message(Admin.IN_POST_PHOTOS)
async def adminPostNextPIC(message: Message, state: FSMContext):
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –û–î–ù–£ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ –ø–æ—Å—Ç—É"
                         "\n\n–ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å —Å–∏–º–≤–æ–ª Z(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥–ª–∞–≤–Ω–∞—è)",
                         reply_markup=adminMenuExit, parse_mode=None)
    await state.update_data(links_kb=message.text)
    await state.set_state(Admin.IN_POST_WAIT_PHOTOS)


@router.message(Admin.IN_POST_WAIT_PHOTOS)
async def adminPostDemo(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        builder = InlineKeyboardBuilder()

        if data["text_kb"] != "Z" and message.content_type == content_type.ContentType.PHOTO:
            for text, link in zip(data["text_kb"].split(";"), data["links_kb"].split(";")):
                builder.row(InlineKeyboardButton(
                    text=text,
                    url=link))
            await bot.send_photo(chat_id=message.from_user.id, caption=data["text"], photo=message.photo[-1].file_id,
                                 reply_markup=builder.as_markup(), parse_mode="HTML")
            await state.clear()
            await state.update_data(builder=builder, photo=message.photo[-1].file_id, text=data["text"])

        if data["text_kb"] == "Z" and message.content_type == content_type.ContentType.PHOTO:
            await bot.send_photo(chat_id=message.from_user.id, caption=data["text"], photo=message.photo[-1].file_id,
                                 parse_mode="HTML")
            await state.clear()
            await state.update_data(builder="Z", photo=message.photo[-1].file_id, text=data["text"])

        if data["text_kb"] == "Z" and message.content_type == content_type.ContentType.TEXT:
            await bot.send_message(chat_id=message.from_user.id, text=data["text"], parse_mode="HTML")
            await state.clear()
            await state.update_data(builder="Z", photo="Z", text=data["text"])

        if data["text_kb"] != "Z" and message.content_type == content_type.ContentType.TEXT:
            for text, link in zip(data["text_kb"].split(";"), data["links_kb"].split(";")):
                builder.row(InlineKeyboardButton(
                    text=text,
                    url=link))
            await bot.send_message(chat_id=message.from_user.id, text=data["text"], reply_markup=builder.as_markup(),
                                   parse_mode="HTML")
            await state.clear()
            await state.update_data(builder=builder, photo="Z", text=data["text"])

        builder2 = InlineKeyboardBuilder()
        builder2.row(InlineKeyboardButton(
            text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='GOPOST')
        )
        builder2.row(InlineKeyboardButton(
            text="–û—Ç–º–µ–Ω–∞", callback_data='adminMenuExit')
        )
        await message.answer("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=builder2.as_markup())
    except Exception as ex:
        await state.clear()
        await message.answer(f"–ê–≤–∞—Ä–∏–π–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è. –û—à–∏–±–∫–∞: {ex.args}", parse_mode=None)


@router.callback_query(F.data == "GOPOST")
async def adminPostGo(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:

        data = await state.get_data()
        await callback.answer()
        await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞")
        databaseStatistics.addPost()
        await cmd_start(callback)

        if data["builder"] == "Z" and data["photo"] == "Z":
            for i in databaseUsers.getUsers():
                try:
                    await bot.send_message(chat_id=i, text=data["text"], parse_mode="HTML")
                except:
                    pass
        if data["builder"] != "Z" and data["photo"] == "Z":
            for i in databaseUsers.getUsers():
                try:
                    await bot.send_message(chat_id=i, text=data["text"], reply_markup=data["builder"].as_markup(),
                                           parse_mode="HTML")
                except:
                    pass
        if data["builder"] == "Z" and data["photo"] != "Z":
            for i in databaseUsers.getUsers():
                try:
                    await bot.send_photo(chat_id=i, caption=data["text"], photo=data["photo"], parse_mode="HTML")
                except:
                    pass
        if data["builder"] != "Z" and data["photo"] != "Z":
            for i in databaseUsers.getUsers():
                try:
                    await bot.send_photo(chat_id=i, caption=data["text"], photo=data["photo"],
                                         reply_markup=data["builder"].as_markup(), parse_mode="HTML")
                except:
                    pass

        await state.clear()
        await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞")
    except Exception as ex:
        await state.clear()
        await callback.message.answer(f"–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏. –û—à–∏–±–∫–∞: {ex.args}", parse_mode=None)
